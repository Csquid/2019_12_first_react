{"version":3,"sources":["Property/Potato.js","Property/Singer.js","Property/Property.js","include/jquery.js","include/tether.js","include/popper.js","State/Counter.js","State/Movie.js","State/Movies.js","State/State.js","index.js"],"names":["Potato","Singer","this","props","name","rating","src","picture","alt","width","React","Component","propTypes","PropTypes","string","isRequired","number","Property","window","jQuery","$","Tether","Popper","noString","Movie","id","year","title","summary","poster","genres","className","map","genre","index","key","slice","Movies","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","movie","medium_cover_image","State","ReactDOM","render","document","getElementById"],"mappings":"iPAUeA,I,mCC+BAC,E,iLATP,OAAQ,6BACJ,gDAAsBC,KAAKC,MAAMC,MACjC,gCAAMF,KAAKC,MAAME,OAAjB,SACA,yBAAKC,IAAKJ,KAAKC,MAAMI,QACjBC,IAAI,MACJC,MAAM,a,GAPDC,IAAMC,WC+C3BV,EAAOW,UAAY,CACjBR,KAAMS,IAAUC,OAAOC,WACvBV,OAAQQ,IAAUG,OAAOD,WACzBR,QAASM,IAAUC,OAAOC,YAQbE,I,OCtFfC,OAAOC,OAASD,OAAOE,EAAIA,E,qBCA3BF,OAAOG,OAASA,I,YCAhBH,OAAOI,OAASA,U,YCCMZ,IAAMC,U,6CCCtBY,G,MAAW,mRAyCFC,MAxCf,YAOG,EANCC,GAMA,IALAC,EAKD,EALCA,KACAC,EAID,EAJCA,MACAC,EAGD,EAHCA,QACAC,EAED,EAFCA,OACAC,EACD,EADCA,OAEA,OACI,yBAAKC,UAAU,SACX,yBAAKzB,IAAKuB,EAAQrB,IAAKmB,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,cACX,wBAAIA,UAAU,eAAd,IAA8BJ,EAA9B,KACA,wBAAII,UAAU,cAAd,IAA6BL,EAA7B,KACA,wBAAIK,UAAU,gBAEVD,EAAOE,KAAI,SAACC,EAAOC,GAAR,OACT,wBAAIC,IAAKD,EAAOH,UAAU,gBACvBE,OAIT,uBAAGF,UAAU,iBAAb,IAA+BH,EAAQQ,MAAM,EAAG,KAAOR,EAAUL,EAAjE,WCiCDc,G,kBAtDX,WAAYlC,GAAQ,IAAD,8BACf,4CAAMA,KAEVmC,MAAQ,CACJC,WAAW,EACXC,OAAQ,IALO,EAQnBC,UARmB,sBAQP,8BAAAC,EAAA,sEAOEC,IAAMC,IAAI,6CAPZ,gBAKQJ,EALR,EAIJK,KACIA,KAAQL,OAGhBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAT3B,2CARO,E,2LAqBfrC,KAAKuC,Y,qIAGC,IAAD,EACyBvC,KAAKoC,MAA3BC,EADH,EACGA,UAAWC,EADd,EACcA,OAEnB,OADAM,QAAQC,IAAI,iBAER,6BAAShB,UAAU,aACdQ,EACG,yBAAKR,UAAU,UACX,0BAAMA,UAAU,gBAAhB,cACA,qDAGJ,yBAAKA,UAAU,UACVS,EAAOR,KAAI,SAAAiB,GAAK,OACjB,kBAAC,EAAD,CACId,IAAKc,EAAMxB,GACXA,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,kB,GA7CrBpB,IAAMC,YCiCZwC,E,YA7BX,WAAYhD,GAAQ,qEACVA,I,sEAmBN,OACI,6BAEI,kBAAC,EAAD,W,GAxBIO,IAAMC,WCG1ByC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,Y","file":"static/js/main.208239f2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Potato() {\r\n    return (\r\n        <div>\r\n            <h3>I Love Potato</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Potato;","import React from 'react';\r\n\r\n/*\r\n\r\n//Function형 Component\r\nfunction Singer({id, name, picture, rating}) {\r\n    return (<div>\r\n        <h3>I Like Singer is {name}</h3>\r\n        <h4> {rating}/10.0</h4>\r\n        <img src={picture}\r\n            alt=\"any\"\r\n            width=\"250\"/>\r\n    </div>);\r\n}\r\n*/\r\n\r\n/*\r\n//Lambda Function형 Component\r\nconst Singer = ({id, name, picture, rating}) => {\r\n    return (<div>\r\n        <h3>I Like Singer is {name}</h3>\r\n        <h4> {rating}/10.0</h4>\r\n        <img src={picture}\r\n            alt=\"any\"\r\n            width=\"250\"/>\r\n    </div>);\r\n}\r\n*/\r\n\r\n//Class형 Component\r\nclass Singer extends React.Component {\r\n    render() {\r\n        return (<div>\r\n            <h3>I Like Singer is {this.props.name}</h3>\r\n            <h4> {this.props.rating}/10.0</h4>\r\n            <img src={this.props.picture}\r\n                alt=\"any\"\r\n                width=\"250\"/>\r\n        </div>);\r\n    }\r\n}\r\nexport default Singer;\r\n","/*\r\n  Component를 작성할때마다 [ import React from 'react'; ] 를 써주어야한다.\r\n  이것을 작성하지않으면 React는 여기에 jsx가 있는 Component를 사용하는것을 이해하지 못한다.\r\n*/\r\n\r\nimport React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport Potato from './Potato';\r\nimport Singer from './Singer';\r\nimport {likeSinger} from './DataBase';\r\n\r\nfunction Food(props) {\r\n  return <h3>I Like {props.name} </h3>\r\n}\r\n\r\nfunction Apple({user_name}) {\r\n  return <h3>User Name is {user_name} </h3>\r\n}\r\n\r\nfunction renderSinger(singer, index) {\r\n  console.log(singer);\r\n  return <Singer name={singer.name} picture={singer.img_url} key={index} />\r\n}\r\n\r\nconst Children = (props) => {\r\n  return <div>안녕하세요. {props.children} 님</div>\r\n}\r\n\r\nfunction Property() {\r\n  return (\r\n    <div>\r\n      <h1>Hello World!</h1>\r\n      {/* Component에  정보를 보내는 방법 */}\r\n      {/* name과 같이 정해져있지않다.*/}\r\n      {/* name, fav 같은 것을 property라고 한다 (속성) 사용자가 속성의 이름을 원하는걸로 만들어줄수있다.*/}\r\n      <Food \r\n        name = \"kimchi\" \r\n        something = {true}\r\n        papapapap = { [0, 1, 2, 3, 4, 5] }\r\n      />\r\n\r\n      {/*\r\n        <Food name = \"ramen\"/>\r\n        <Food name = \"samgiopsal\"/>\r\n        <Food name = \"chukumi\"/>\r\n      */}\r\n\r\n      {[\"ramen\", \"samgiopsal\", \"chukumi\"].map((foodName, index) => \r\n        <Food name={foodName} key={index}/>\r\n      )}\r\n      \r\n      <Potato />\r\n      <Apple user_name = \"lake0019\"/>\r\n      <Apple user_name = \"dmsqlctnekf\"/>\r\n\r\n      <br />\r\n      {/*likeSinger.map(renderSinger)*/}\r\n      \r\n      { likeSinger.map(singer => \r\n        <Singer \r\n          key={singer.id}\r\n          name={singer.name} \r\n          rating={singer.rating}\r\n          picture={singer.img_url} \r\n        />) \r\n      }\r\n\r\n      {[\"정준영\", \"이순신\"].map((name, index) => \r\n        <Children key={index}>\r\n          {name}\r\n        </Children>  \r\n      )}\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nSinger.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  rating: PropTypes.number.isRequired,\r\n  picture: PropTypes.string.isRequired\r\n}\r\n\r\nFood.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  something: PropTypes.bool,\r\n  papapapap: PropTypes.arrayOf(PropTypes.number)\r\n}\r\nexport default Property;\r\n","import * as $ from 'jquery';\r\n\r\nwindow.jQuery = window.$ = $;","import Tether from 'tether';\r\n\r\nwindow.Tether = Tether;","import Popper from 'popper.js';\r\n\r\nwindow.Popper = Popper;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Counter extends React.Component {\r\n    state = {\r\n        count: 0\r\n    };\r\n    add = () => {\r\n      //console.log(\"add\");\r\n      //this.state.count = 1;\r\n      //this.setState({count: this.state.count + 1});\r\n      this.setState(current => ({count: current.count + 1}));\r\n    };\r\n    minus = () => {\r\n      //console.log(\"minus\");\r\n      //this.setState({count: this.state.count - 1});\r\n      this.setState(current => ({count: current.count - 1}));\r\n    };\r\n   \r\n    render() {\r\n      return (\r\n      <div>\r\n        <h1>The number is { this.state.count }</h1>\r\n        <button type=\"button\" className=\"btn btn-primary\" onClick={this.add}>Add</button>\r\n        <button type=\"button\" className=\"btn btn-primary\" onClick={this.minus}>Minus</button>\r\n        \r\n      </div>\r\n      \r\n      );\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nconst noString = \"A horror-comedy slasher set in the 80's about a woman wrongfully fired from her office job and forced to take on a temporary job on a crime scene cleanup crew. With a maniacal serial killer on the loose leaving them lots of work, did he ever leave the scene of the crime?\";\r\nfunction Movie({\r\n    id,\r\n    year,\r\n    title,\r\n    summary,\r\n    poster,\r\n    genres\r\n}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}></img>\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie_title\"> {title} </h3>\r\n                <h5 className=\"movie_year\"> {year} </h5> \r\n                <ul className=\"movie_genres\">\r\n                  {\r\n                    genres.map((genre, index) => \r\n                      <li key={index} className=\"genres_genre\"> \r\n                        {genre}\r\n                      </li>\r\n                  )} \r\n                </ul>\r\n                <p className=\"movie_summary\"> {summary.slice(0, 140) ? summary : noString}... </p>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n// summary:\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from './Movie';\r\nimport \"./Movies.css\";\r\n\r\nclass Movies extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    state = {\r\n        isLoading: true,\r\n        movies: []\r\n    };\r\n\r\n    getMovies = async () => {\r\n        //다 받을때까지 대기\r\n        //movies.data.data.movies\r\n        const {\r\n            data: {\r\n                data: { movies }\r\n            }\r\n        } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\r\n        console.log(movies);\r\n        this.setState({ movies, isLoading: false });\r\n        /* data.data.movies = {data: {data :{movies}}} */\r\n    }\r\n    async componentDidMount() {\r\n        this.getMovies();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, movies } = this.state;\r\n        console.log(\"I'm Rendering\");\r\n        return (\r\n            <section className=\"containal\">\r\n                {isLoading ? (\r\n                    <div className=\"loader\">\r\n                        <span className=\"loader__text\">Loading...</span>\r\n                        <script> alert(\"test\"); </script>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"movies\">\r\n                        {movies.map(movie => (\r\n                        <Movie \r\n                            key={movie.id}\r\n                            id={movie.id} \r\n                            year={movie.year} \r\n                            title={movie.title} \r\n                            summary={movie.summary} \r\n                            poster={movie.medium_cover_image} \r\n                            genres={movie.genres}\r\n                        />\r\n                        ))}\r\n                    </div>  \r\n                )} \r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Movies;\r\n\r\n","import React from 'react';\r\n\r\nimport '../include/bootstrap'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Counter from './Counter';\r\nimport Movies from './Movies';\r\n\r\nclass State extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    /*\r\n\r\n    **** Component Life Cycle ****\r\n\r\n    componentDidMount() {\r\n      console.log(\"component Rrendered\");\r\n    }\r\n    componentDidUpdate() {\r\n      console.log(\"I just Updated\");\r\n    }\r\n    componentWillUnmount() {\r\n      console.log(\"Good Bye, Cruel World\");\r\n    }\r\n    */\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*<Counter >*/}\r\n                <Movies />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default State;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Property from './Property/Property';\r\nimport State from './State/State';\r\n\r\n/*\r\n    ReactDOM.render(<App /><Tomato />, document.getElementById('potato'));\r\n    이게 안되는 이유는 react application은 하나의 component 만을 rendering해야하기 때문이다.\r\n*/\r\n//ReactDOM.render(<Property/>, document.getElementById('property'));\r\nReactDOM.render(<State />, document.getElementById(\"state\"))"],"sourceRoot":""}